{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "This AWS CloudFormation Template deploys a pair of Brocade vADCs into a new VPC. Each vADC has two NICs - one in public and one in private subnet. The AMI is chosen based on the region in which the stack is run. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template. In order to access the Brocade Virtual Traffic Manager please enter https://<public dns>:9090 into your web browser. For instructions on using this product, please visit: http://www.brocade.com/content/brocade/en/backend-content/pdf-page.html?/content/dam/common/documents/content-types/user-guide/brocade-vtm-11.0-cloud-gsg.pdf for the Cloud Services Installation and Getting Started Guide.", 
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "VPC Configuration" },
          "Parameters" : [ "AZs", "VPCCIDR", "PublicSubnetCIDR1", "PrivateSubnetCIDR1", "PublicSubnetCIDR2", "PrivateSubnetCIDR2" ]
        },

        {
          "Label" : { "default" : "vADC Configuration" },
          "Parameters" : [ "SrvPoolCIDR", "vADCVers", "InstanceType", "KeyName", "AdminPass" ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [ "RemoteAccessCIDR" ]
        }
      ],
      "ParameterLabels" : {
        "SrvPoolCIDR" : { "default" : "Server Pool CIDR Block:" },
        "VPCCIDR" : { "default" : "New VPC CIDR Block:" },
        "PublicSubnetCIDR1" : { "default" : "Public Subnet 1:" },
        "PublicSubnetCIDR2" : { "default" : "Public Subnet 2:" },
        "PrivateSubnetCIDR1" : { "default" : "Private Subnet 1:" },
        "PrivateSubnetCIDR2" : { "default" : "Private Subnet 2:" },
        "InstanceType" : { "default" : "vADC instance type:" },
        "vADCVers" : { "default" : "vADC Version:" },
        "KeyName" : { "default" : "SSH Key Name:" },
        "AdminPass" : { "default" : "vADC admin user password:" },
        "AZs" : { "default" : "Select two Availability Zones:" },
        "RemoteAccessCIDR" : { "default" : "Remote Access CIDR:" }
        
      }
    }
  },

  "Parameters": {
    "InstanceType": {
      "Description": "Please select a vADC EC2 instance type",
      "Type": "String",
      "Default": "m4.large",
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "Must be an allowed EC2 instance type."
    },

    "vADCVers" : {
      "Description" : "Please select vADC version:",
      "Type" : "String",
      "Default" : "171",
      "AllowedValues" : [
        "104r1",
        "110",
        "111",
        "171"
      ],
      "ConstraintDescription" : "Must be a valid vADC version"
    },

    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "Description": "Name of an existing EC2 KeyPair. Your vADC will launch with this KeyPair.",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },

    "AdminPass": {
      "Description" : "Password for the vADC admin user. Must be 6 to 32 characters containing letters, numbers and symbols",
      "Type"        : "String",
      "MinLength"   : "6",
      "MaxLength"   : "32",
      "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "NoEcho"         : "true",
      "Default"        : "Password123"
    },

    "SrvPoolCIDR": {
      "Description": "Subnet where pool members live; can be external to VPC. vADCs will access this subnet through their second interface connected to private subnet.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.8.4.0/23",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "RemoteAccessCIDR": {
      "Description": "Allowed source IP address range for SSH access into vADC",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "VPCCIDR": {
      "Description": "This is the IP block for your new VPC. Typically it is a /16 from the private IP range.",
      "Type": "String",
      "Default": "10.8.0.0/16",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "AZs": {
      "Description": "List of Availability Zones where Private and Public subnet pairs will be created. Please select two.",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "ConstraintDescription": "Please select an AZ from a drop-down list."            
    },

    "PublicSubnetCIDR1": {
      "Description": "vADC 1 will have one interface in this public subnet.",
      "Type": "String",
      "Default": "10.8.2.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "PublicSubnetCIDR2": {
      "Description": "vADC 2 will have one interface in this public subnet.",
      "Type": "String",
      "Default": "10.8.3.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "PrivateSubnetCIDR1": {
      "Description": "This is a private subnet available for your instances in AZ1.",
      "Type": "String",
      "Default": "10.8.4.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },
    
    "PrivateSubnetCIDR2": {
      "Description": "This is a private subnet available for your instances in AZ2.",
      "Type": "String",
      "Default": "10.8.5.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    }


  },

  "Mappings" : {

    "vADCAMI" : {
      "ap-south-1" : { "104r1" : "ami-37cabd58", "110" : "ami-f9bcd696", "111" : "ami-856115ea", "171" : "ami-b73f4ed8" },
      "eu-west-2" : { "104r1" : "ami-f8e0ea9c", "111" : "ami-60212b04", "171" : "ami-72a1ab16" },
      "eu-west-1" : { "104r1" : "ami-014b6872", "110" : "ami-4f0f963c", "111" : "ami-3bd89748", "171" : "ami-04f7a862" },
      "ap-northeast-2" : { "104r1" : "ami-ced701a0", "110" : "ami-3d4f8453", "111" : "ami-5ffb2f31", "171" : "ami-17e83979" },
      "ap-northeast-1" : { "104r1" : "ami-d1e289b6", "110" : "ami-b17480d0", "111" : "ami-381dba59", "171" : "ami-1a7e047d" },
      "sa-east-1" : { "104r1" : "ami-df65fdb3", "110" : "ami-792ea415", "111" : "ami-a362ffcf", "171" : "ami-b686e3da" },
      "ca-central-1" : { "104r1" : "ami-cf2496ab", "111" : "ami-ea84368e", "171" : "ami-52d56836" },
      "ap-southeast-1" : { "104r1" : "ami-c3852ba0", "110" : "ami-826bb8e1", "111" : "ami-ab4fe9c8", "171" : "ami-76e05515" },
      "ap-southeast-2" : { "104r1" : "ami-51a19a32", "110" : "ami-983e16fb", "111" : "ami-5a5e6339", "171" : "ami-74303717" },
      "eu-central-1" : { "104r1" : "ami-595e9e36", "110" : "ami-93dc34fc", "111" : "ami-9e30c9f1", "171" : "ami-6ba36d04" },
      "us-east-1" : { "104r1" : "ami-8f120598", "110" : "ami-7f0bc812", "111" : "ami-a87626bf", "171" : "ami-ca0effdc" },
      "us-east-2" : { "104r1" : "ami-d1c49eb4", "111" : "ami-e03a6085", "171" : "ami-9f5a7ffa" },
      "us-west-1" : { "104r1" : "ami-854b1ae5", "110" : "ami-52397d32", "111" : "ami-dbfdb5bb", "171" : "ami-86d082e6" },
      "us-west-2" : { "104r1" : "ami-aaa215ca", "110" : "ami-913df9f1", "111" : "ami-d12c89b1", "171" : "ami-38f04958" }
    }

  },

  "Conditions" : {
    "US-East-1": { "Fn::Equals" : [{ "Ref" : "AWS::Region" }, "us-east-1"] }
  },

  "Resources": {

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {  "Key": "Application",
            "Value": "vADC Quick Start"
          },

          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "VPC" ] ] }
          }

        ]
      }
    },

    "DHCPOptions" : {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "US-East-1",
            "ec2.internal",
            { "Fn::Join": [ ".", [ { "Ref" : "AWS::Region" }, "compute.internal" ] ] }
          ]
        },
        "DomainNameServers": [ "AmazonProvidedDNS" ]
      }
    },

    "VPCDHCPOptionsAssociation" : {
      "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "DhcpOptionsId" : {"Ref" : "DHCPOptions"}
      }
    },

    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCIDR1"
        },
        "Tags": [
          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSub1" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Ref": "AZs" } ]
        }
      }
    },

    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCIDR2"
        },
        "Tags": [
          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSub2" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Ref": "AZs" } ]
        }
      }
    },

    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PriSub1" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Ref": "AZs" } ]
        }
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PriSub2" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Ref": "AZs" } ]
        }
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "IGW" ] ] }
          }
        ]
      }
    },

    "AttachGateway": {
      "DependsOn": "InternetGateway",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnetRouteTable": {
      "DependsOn": "AttachGateway",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSubRouteTab" ] ] }
          }
        ]
      }
    },

    "PublicRoute1": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
        "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        }
      }
    },

    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        }
      }
    },

    "vADCSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "vADC Access Rules",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9090",
            "ToPort": "9090",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "9090",
            "ToPort": "9090",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9080",
            "ToPort": "9080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "9080",
            "ToPort": "9080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8083",
            "ToPort": "8083",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8086",
            "ToPort": "8086",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11000",
            "ToPort": "11000",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11002",
            "ToPort": "11002",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11007",
            "ToPort": "11007",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9070",
            "ToPort": "9070",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADCSG" ] ] }
          }
        ]
      }
    },

    "vADC1EIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "vADC2EIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "vADC1Interface1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "Description": "External interface for the vADC 1",
        "GroupSet": [
          {
            "Ref": "vADCSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC1PubInt" ] ] }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

    "vADC1Interface2": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "Description": "Internal interface for the vADC 1",
        "GroupSet": [
          {
            "Ref": "vADCSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC1PriInt" ] ] }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },

    "vADC2Interface1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "Description": "External interface for the vADC 2",
        "GroupSet": [
          {
            "Ref": "vADCSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC2PubInt" ] ] }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

    "vADC2Interface2": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "Description": "Internal interface for the vADC 2",
        "GroupSet": [
          {
            "Ref": "vADCSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC2PriInt" ] ] }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },

    "AssociatevADC1Interface": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "vADC1EIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "vADC1Interface1"
        }
      }
    },

    "AssociatevADC2Interface": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "vADC2EIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "vADC2Interface1"
        }
      }
    },

    "vADCIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "vADCIAMPolicy",
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeRegions",
                    "ec2:DescribeInstances",
                    "ec2:DescribeAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress",
                    "ec2:AllocateAddress",
                    "ec2:ReleaseAddress",
                    "ec2:AssignPrivateIPAddresses",
                    "ec2:UnAssignPrivateIpAddresses",
                    "ec2:RunInstances",
                    "ec2:CreateTags",
                    "ec2:TerminateInstances"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "vADCInstanceIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "vADCIAMRole"
          }
        ]
      }
    },


    "vADC1": {
      "Type": "AWS::EC2::Instance",

      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : [ "RunCommands" ]
          },

          "RunCommands" : {
            "commands" : {

              "00-make-eth1-conf" : {
                "command" : { "Fn::Join" : ["", [
                    "echo '",
                    { "Fn::GetAtt" : [ "vADC1Interface2", "PrimaryPrivateIpAddress" ] },
                    "' | awk -F. '{ printf \"\\n\\nauto eth1\\niface eth1 inet static\\naddress %s\\nnetmask 255.255.255.0\\nup route add -net ",
                    { "Ref" : "SrvPoolCIDR" },
                    " gw %s.%s.%s.1\\n\", $0, $1, $2, $3 }' >> /etc/network/interfaces"
                  ]]}
              },

              "01-eth1-unconf" : {
                "command" : "ifconfig eth1 0.0.0.0"
              },

              "02-eth1-up" : {
                "command" : "ifup eth1"
              },

              "03-dev_mode_accept" : {
                "command" : "echo \"developer_mode_accepted     yes\" >> /opt/zeus/zxtm/global.cfg"
              },

              "99-wait_3_mins_then_signal_that_we_are_done" : {
                "command" : { "Fn::Join" : ["", [
                  "sleep 180 && /usr/local/bin/cfn-signal -s true '",
                  { "Ref" : "WaitHandle01" },
                  "'"
                ]]}
              }

            }
          }
        }
      },

      "DependsOn": "AttachGateway",
      "Properties": {
        "IamInstanceProfile": { "Ref": "vADCInstanceIAMProfile"},
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC1" ] ] }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "password=",
            { "Ref" : "AdminPass" },
          " accept_license=y",
          " cfn_stack=",
            { "Ref" : "AWS::StackName" },
          " cfn_resource=",
            "vADC1",
          " cfn_region=",
            { "Ref" : "AWS::Region" }
        ]]}},
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "vADC1Interface1"
            },
            "DeviceIndex": "0"
          },
          {
            "NetworkInterfaceId": {
              "Ref": "vADC1Interface2"
            },
            "DeviceIndex": "1"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "vADCAMI",
            { "Ref": "AWS::Region" },
            { "Ref": "vADCVers" }
          ]
        }
      }
    },

    "vADC1RecoveryAlarm": {
      "DependsOn": "vADC1",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "EC2 Autorecovery for vADC 1. Autorecover if we fail EC2 status checks for 15 minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "vADC1"
            }
          }
        ]
      }
    },

    "WaitHandle01": {
        "Type": "AWS::CloudFormation::WaitConditionHandle",
        "Properties": {}
    },
    "WaitCondition01": {
        "Type": "AWS::CloudFormation::WaitCondition",
        "DependsOn": "vADC1",
        "Properties": {
            "Handle": {
                "Ref": "WaitHandle01"
            },
            "Timeout": "600"
        }
    },

    "vADC2": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "WaitCondition01",

      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : [ "RunCommands" ]
          },

          "RunCommands" : {
            "commands" : {

              "00-make-eth1-conf" : {
                "command" : { "Fn::Join" : ["", [
                    "echo '",
                    { "Fn::GetAtt" : [ "vADC2Interface2", "PrimaryPrivateIpAddress" ] },
                    "' | awk -F. '{ printf \"\\n\\nauto eth1\\niface eth1 inet static\\naddress %s\\nnetmask 255.255.255.0\\nup route add -net ",
                    { "Ref" : "SrvPoolCIDR" },
                    " gw %s.%s.%s.1\\n\", $0, $1, $2, $3 }' >> /etc/network/interfaces"
                  ]]}
              },

              "01-eth1-unconf" : {
                "command" : "ifconfig eth1 0.0.0.0"
              },

              "02-eth1-up" : {
                "command" : "ifup eth1"
              },

              "03-dev_mode_accept" : {
                "command" : "echo \"developer_mode_accepted     yes\" >> /opt/zeus/zxtm/global.cfg"
              },

              "04-replicate_updated_config" : {
                "command" : "sleep 30 && /opt/zeus/zxtm/bin/replicate-config"
              }

            }
          }
        }
      },


      "Properties": {
        "IamInstanceProfile": { "Ref": "vADCInstanceIAMProfile"},
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC2" ] ] }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "accept_license=y",
          " password=",
            { "Ref" : "AdminPass" },
          " cluster_host=",
            { "Fn::GetAtt" : [ "vADC1Interface1", "PrimaryPrivateIpAddress" ] },
          " cluster_fingerprint=unsafe",
          " join_tips=y",
          " cfn_stack=",
            { "Ref" : "AWS::StackName" },
          " cfn_resource=",
            "vADC2",
          " cfn_region=",
            { "Ref" : "AWS::Region" }
        ]]}},
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "vADC2Interface1"
            },
            "DeviceIndex": "0"
          },
          {
            "NetworkInterfaceId": {
              "Ref": "vADC2Interface2"
            },
            "DeviceIndex": "1"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "vADCAMI",
            { "Ref": "AWS::Region" },
            { "Ref": "vADCVers" }
          ]
        }
      }
    },

    "vADC2RecoveryAlarm": {
      "DependsOn": "vADC2",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "EC2 Autorecovery for vADC 2. Autorecover if we fail EC2 status checks for 15 minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "vADC2"
            }
          }
        ]
      }
    }
  
  },

  "Outputs": {

    "StackID": {
      "Description": "Stack Id",
      "Value": {
          "Ref": "AWS::StackId"
      }
    },

    "VPCID": {
      "Description": "VPC Id",
      "Value": {
          "Ref": "VPC"
      }
    },

    "Region": {
      "Description": "Region",
      "Value": {
          "Ref": "AWS::Region"
      }
    },

    "vADC1PubIP": {
      "Description": "vADC 1 Public IP",
      "Value": {
          "Ref": "vADC1EIP"
      }
    },

    "vADC2PubIP": {
      "Description": "vADC 2 Public IP",
      "Value": {
          "Ref": "vADC2EIP"
      }
    },

    "ClusterAdminURL": {
      "Description": "URL to access vADC Cluster Admin interface",
      "Value": {
        "Fn::Join": [ "", [
          "https://",
          { "Fn::GetAtt": [ "vADC1", "PublicDnsName" ] },
          ":9090"
        ] ]
      }
    }

  }
 
}
