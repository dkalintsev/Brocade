{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "This AWS CloudFormation Template deploys a pair of Brocade vADCs into a new VPC. The AMI is chosen based on the region in which the stack is run. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.", 
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "VPC Configuration" },
          "Parameters" : [ "AZs", "VPCCIDR", "PublicSubnetCIDR1", "PrivateSubnetCIDR1", "PublicSubnetCIDR2", "PrivateSubnetCIDR2" ]
        },

        {
          "Label" : { "default" : "vADC Configuration" },
          "Parameters" : [ "vADCVers", "InstanceType", "KeyName", "AdminPass" ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [ "RemoteAccessCIDR" ]
        }
      ],
      "ParameterLabels" : {
        "VPCCIDR" : { "default" : "New VPC CIDR Block:" },
        "PublicSubnetCIDR1" : { "default" : "Public Subnet 1:" },
        "PublicSubnetCIDR2" : { "default" : "Public Subnet 2:" },
        "PrivateSubnetCIDR1" : { "default" : "Private Subnet 1:" },
        "PrivateSubnetCIDR2" : { "default" : "Private Subnet 2:" },
        "InstanceType" : { "default" : "vADC instance type:" },
        "vADCVers" : { "default" : "vADC Version:" },
        "KeyName" : { "default" : "SSH Key Name:" },
        "AdminPass" : { "default" : "vADC admin user password:" },
        "AZs" : { "default" : "Select two Availability Zones:" },
        "RemoteAccessCIDR" : { "default" : "Remote Access CIDR:" }
        
      }
    }
  },

  "Parameters": {
    "InstanceType": {
      "Description": "Please select a vADC EC2 instance type",
      "Type": "String",
      "Default": "m4.large",
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "Must be an allowed EC2 instance type."
    },

    "vADCVers" : {
      "Description" : "Please select vADC version. This template deploys Developer Edition SKU. Note not all vADC versions are available in all regions, and some older versions may not be available, too.",
      "Type" : "String",
      "Default" : "110",
      "AllowedValues" : [
        "98r1",
        "98r2",
        "99",
        "99r1",
        "100",
        "101",
        "102r1",
        "103",
        "103r1",
        "104",
        "110"
      ],
      "ConstraintDescription" : "Must be a valid vADC version"
    },

    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "Description": "Name of an existing EC2 KeyPair. Your vADC will launch with this KeyPair.",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },

    "AdminPass": {
      "Description" : "Password for the vADC admin user. Must be 6 to 32 characters containing letters, numbers and symbols",
      "Type"        : "String",
      "MinLength"   : "6",
      "MaxLength"   : "32",
      "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "NoEcho"         : "true",
      "Default"        : "Password123"
    },

    "RemoteAccessCIDR": {
      "Description": "Allowed source IP address range for SSH access into vADC",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "VPCCIDR": {
      "Description": "This is the IP block for your new VPC. Typically it is a /16 from the private IP range.",
      "Type": "String",
      "Default": "10.8.0.0/16",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "AZs": {
      "Description": "List of Availability Zones where Private and Public subnet pairs will be created. Please select two.",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "ConstraintDescription": "Please select an AZ from a drop-down list."            
    },

    "PublicSubnetCIDR1": {
      "Description": "vADC 1 will have one interface in this public subnet.",
      "Type": "String",
      "Default": "10.8.1.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "PublicSubnetCIDR2": {
      "Description": "vADC 2 will have one interface in this public subnet.",
      "Type": "String",
      "Default": "10.8.2.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "PrivateSubnetCIDR1": {
      "Description": "This is a private subnet available for your instances in AZ1.",
      "Type": "String",
      "Default": "10.8.3.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },
    
    "PrivateSubnetCIDR2": {
      "Description": "This is a private subnet available for your instances in AZ2.",
      "Type": "String",
      "Default": "10.8.4.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    }


  },

  "Mappings" : {
    "AWSRegions" : {
      "us-east-1"      : { "Name" : "US East (N. Virginia)" },
      "us-west-1"      : { "Name" : "US West (N. California)" },
      "us-west-2"      : { "Name" : "US West (Oregon)" },
      "eu-west-1"      : { "Name" : "EU (Ireland)" },
      "eu-central-1"   : { "Name" : "EU (Frankfurt)" },
      "ap-south-1"     : { "Name" : "Asia Pacific (Mumbai)" },
      "ap-northeast-1" : { "Name" : "Asia Pacific (Tokyo)" },
      "ap-northeast-2" : { "Name" : "Asia Pacific (Seoul)" },
      "ap-southeast-1" : { "Name" : "Asia Pacific (Singapore)" },
      "ap-southeast-2" : { "Name" : "Asia Pacific (Sydney)" },
      "sa-east-1"      : { "Name" : "South America (SÃ£o Paulo)" }
    },

    "vADCAMI" : {
      "ap-south-1" : { "104" : "ami-1b1a7074", "110" : "ami-f9bcd696" },
      "eu-west-1" : { "98r1" : "ami-dcb714ab", "98r2" : "ami-e455e193", "99" : "ami-55781f22", "99r1" : "ami-ead66f99", "100" : "ami-514c2c26", "101" : "ami-fa1d408d", "102r1" : "ami-d976d2aa", "103" : "ami-796bcb0a", "103r1" : "ami-33fa4140", "104" : "ami-b46ee8c7", "110" : "ami-4f0f963c" },
      "ap-southeast-1" : { "98r1" : "ami-44b39416", "98r2" : "ami-a8b497fa", "99" : "ami-4e47751c", "99r1" : "ami-ddf931be", "100" : "ami-2a655878", "101" : "ami-bc444aee", "102r1" : "ami-64559407", "103" : "ami-7bb47718", "103r1" : "ami-357fb756", "104" : "ami-9c38f2ff", "110" : "ami-826bb8e1" },
      "ap-southeast-2" : { "98r1" : "ami-71a2c04b", "98r2" : "ami-bbcea181", "99" : "ami-f393e1c9", "99r1" : "ami-135c7d70", "100" : "ami-91700dab", "101" : "ami-bfadee85", "102r1" : "ami-d5ffa6b6", "103" : "ami-16e5bd75", "103r1" : "ami-a2a687c1", "104" : "ami-b11734d2", "110" : "ami-983e16fb" },
      "eu-central-1" : { "99r1" : "ami-64b5510b", "100" : "ami-68e2de75", "101" : "ami-68262175", "102r1" : "ami-29485545", "103" : "ami-496b7725", "103r1" : "ami-b318fcdc", "104" : "ami-685abc07", "110" : "ami-93dc34fc" },
      "ap-northeast-2" : { "99r1" : "ami-7d6ea013", "103" : "ami-4b965825", "103r1" : "ami-c07db3ae", "104" : "ami-b1c70edf", "110" : "ami-3d4f8453" },
      "ap-northeast-1" : { "98r1" : "ami-133e1412", "98r2" : "ami-2f241c2e", "99" : "ami-926e9792", "99r1" : "ami-20f1fd4e", "100" : "ami-08e12408", "101" : "ami-02803b02", "102r1" : "ami-9681acf8", "103" : "ami-48a98126", "103r1" : "ami-57484139", "104" : "ami-1264727c", "110" : "ami-b17480d0" },
      "us-east-1" : { "98r1" : "ami-3a13a352", "98r2" : "ami-ba008ad2", "99" : "ami-f6417d9e", "99r1" : "ami-f9fac293", "100" : "ami-e6a69c8e", "101" : "ami-a9b912c2", "102r1" : "ami-38cc8d52", "103" : "ami-2f0a4245", "103r1" : "ami-38323652", "104" : "ami-49151e23", "110" : "ami-7f0bc812" },
      "sa-east-1" : { "98r1" : "ami-0d71c410", "98r2" : "ami-7f833562", "99" : "ami-e752e8fa", "99r1" : "ami-cc2eaca0", "100" : "ami-f1a623ec", "101" : "ami-71de566c", "102r1" : "ami-f8b53094", "103" : "ami-1569ed79", "103r1" : "ami-10901d7c", "104" : "ami-1d3cb071", "110" : "ami-792ea415" },
      "us-west-1" : { "98r1" : "ami-4deae108", "98r2" : "ami-25d5c360", "99" : "ami-6d0eed29", "99r1" : "ami-6b3c4f0b", "100" : "ami-03678547", "101" : "ami-fbdc22bf", "102r1" : "ami-01adc461", "103" : "ami-8ec9a1ee", "103r1" : "ami-3d97e45d", "104" : "ami-f296eb92", "110" : "ami-52397d32" },
      "us-west-2" : { "98r1" : "ami-b5f7b585", "98r2" : "ami-85c48fb5", "99" : "ami-d56e45e5", "99r1" : "ami-576f8337", "100" : "ami-f790bac7", "101" : "ami-a7c5cf97", "102r1" : "ami-fccbd89d", "103" : "ami-ad0b17cc", "103r1" : "ami-97bf51f7", "104" : "ami-762cc616", "110" : "ami-913df9f1" }
    }

  },

  "Conditions" : {
  },
  
  "Resources": {

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {  "Key": "Application",
            "Value": "vADC Quick Start"
          },

          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "VPC" ] ] }
          }

        ]
      }
    },

    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCIDR1"
        },
        "Tags": [
          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSub1" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Ref": "AZs" } ]
        }
      }
    },

    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCIDR2"
        },
        "Tags": [
          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSub2" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Ref": "AZs" } ]
        }
      }
    },

    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PriSub1" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Ref": "AZs" } ]
        }
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PriSub2" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Ref": "AZs" } ]
        }
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "IGW" ] ] }
          }
        ]
      }
    },

    "AttachGateway": {
      "DependsOn": "InternetGateway",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnetRouteTable": {
      "DependsOn": "AttachGateway",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSubRouteTab" ] ] }
          }
        ]
      }
    },

    "PublicRoute1": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
        "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        }
      }
    },

    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        }
      }
    },

    "vADCSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "vADC Access Rules",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9090",
            "ToPort": "9090",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "9090",
            "ToPort": "9090",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9080",
            "ToPort": "9080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "9080",
            "ToPort": "9080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8083",
            "ToPort": "8083",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8086",
            "ToPort": "8086",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11000",
            "ToPort": "11000",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11002",
            "ToPort": "11002",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11007",
            "ToPort": "11007",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9070",
            "ToPort": "9070",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADCSG" ] ] }
          }
        ]
      }
    },

    "vADCIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "vADCIAMPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeRegions",
                    "ec2:DescribeInstances",
                    "ec2:DescribeAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress",
                    "ec2:AllocateAddress",
                    "ec2:ReleaseAddress",
                    "ec2:AssignPrivateIPAddresses",
                    "ec2:UnAssignPrivateIpAddresses",
                    "ec2:RunInstances",
                    "ec2:CreateTags",
                    "ec2:TerminateInstances",
                    "ec2:DeleteTags"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "vADCInstanceIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "vADCIAMRole"
          }
        ]
      }
    },

    "vADCGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC" ] ] },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ClusterID",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC-Cluster" ] ] },
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "vADCLaunchConfig"
        },
        "MinSize": "2",
        "MaxSize": "2",
        "DesiredCapacity": "2",
        "VPCZoneIdentifier": [
          { "Ref": "PublicSubnet1" },
          { "Ref": "PublicSubnet2" } 
        ]
      }
    },

    "vADCLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : [ "CreateFiles", "RunCommands" ]
          },

          "CreateFiles" : {
            "files" : {
              "/tmp/autocluster.sh" : {
                "source": "https://raw.githubusercontent.com/dkalintsev/Brocade/master/vADC/CloudFormation/Templates/Variants-and-experimental/Autoclustering/autocluster.sh",
                "context": {
                  "ClusterID":  { "Fn::Join": [ "-", [
                    { "Ref": "AWS::StackName" },
                    "vADC-Cluster"
                  ]]},
                  "AdminPass": { "Ref": "AdminPass" },
                  "Region":  { "Ref": "AWS::Region" },
                  "Verbose": "Yes"              
                },
                "mode": "000755",
                "owner": "root"
              },
              "/tmp/setup_stuff.sh" : {
                "content": { "Fn::Join": [ "", [
                  "#!/bin/bash\n",
                  "echo \"developer_mode_accepted     yes\" >> /opt/zeus/zxtm/global.cfg\n",
                  "echo \"rest!enabled     Yes\" >> /opt/zeus/zxtm/conf/settings.cfg\n",
                  "sed -i -e \"s/\\(flipper\\!autofailback\\).*/\\1     Yes/g\" /opt/zeus/zxtm/conf/settings.cfg\n",
                  "cd /tmp\n",
                  "curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                  "unzip awscli-bundle.zip\n",
                  "./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
                  "rm -rf awscli*\n",
                  "wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64\n",
                  "mv jq-linux64 /usr/local/bin/jq\n",
                  "chmod +x /usr/local/bin/jq\n",
                  "mkdir -p /opt/aws\n",
                  "exit 0\n",
                  "\n"
                ]]},
                "mode": "000755",
                "owner": "root"
              }
            }
          },

          "RunCommands" : {
            "commands" : {

              "01-run_setup_stuff" : {
                "command" : "/tmp/setup_stuff.sh"
              },

              "02-del_setup_script" : {
                "command" : "rm -f /tmp/setup_stuff.sh"
              },

              "03-run_autocluster" : {
                "command" : "/tmp/autocluster.sh"
              },

              "04-del_autocluster_script" : {
                "command" : "rm -f /tmp/autocluster.sh"
              },

              "99-wait_1_min_then_signal_that_we_are_done" : {
                "command" : { "Fn::Join" : ["", [
                  "sleep 60 && /usr/local/bin/cfn-signal -e 0 ",
                  "-d https://$(curl http://169.254.169.254/latest/meta-data/public-ipv4):9090 ",
                  "'",
                  { "Ref" : "WaitHandle01" },
                  "'"
                ]]}
              }

            }
          }
        }
      },

      "DependsOn": "AttachGateway",
      "Properties": {
        "IamInstanceProfile": { "Ref": "vADCInstanceIAMProfile"},
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "AssociatePublicIpAddress": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "vADCAMI",
            { "Ref": "AWS::Region" },
            { "Ref": "vADCVers" }
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "vADCSecurityGroup"
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "password=",
            { "Ref" : "AdminPass" },
          " accept_license=y",
          " cfn_stack=",
            { "Ref" : "AWS::StackName" },
          " cfn_resource=",
            "vADCLaunchConfig",
          " cfn_region=",
            { "Ref" : "AWS::Region" }
        ]]}}
      }
    },


    "WaitHandle01": {
        "Type": "AWS::CloudFormation::WaitConditionHandle",
        "Properties": {}
    },

    "WaitCondition01": {
        "Type": "AWS::CloudFormation::WaitCondition",
        "DependsOn": "vADCGroup",
        "Properties": {
            "Handle": {
                "Ref": "WaitHandle01"
            },
            "Timeout": "600",
            "Count": "2"
        }
    }
  
  },

  "Outputs": {

    "ApplicationData": {
      "Value": {
        "Fn::GetAtt": [
          "WaitCondition01",
          "Data"
        ]
      },
      "Description": "The public IP addresses of the 2 x vADC instances."
    }
  }
}
