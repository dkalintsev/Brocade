{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "This AWS CloudFormation Template deploys a pair of Brocade vADCs in front of two example web servers into a new VPC. It then deploys an additional instance that uses Puppet to push configuration to the vADC cluster, so that it serves the content from the two web servers. The AMI is chosen based on the region in which the stack is run. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "VPC Configuration" },
          "Parameters" : [ "AZs", "VPCCIDR", "PublicSubnetCIDR1", "PrivateSubnetCIDR1", "PublicSubnetCIDR2", "PrivateSubnetCIDR2" ]
        },

        {
          "Label" : { "default" : "vADC Configuration" },
          "Parameters" : [ "vADCVers", "InstanceType", "KeyName", "AdminPass" ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [ "RemoteAccessCIDR" ]
        },
        {
          "Label" : { "default" : "Sample App Configuration" },
          "Parameters" : [ "DomainName", "vADCConfigURL", "SSLPublicKey", "SSLPrivateKey" ]
        }
      ],
      "ParameterLabels" : {
        "VPCCIDR" : { "default" : "New VPC CIDR Block:" },
        "PublicSubnetCIDR1" : { "default" : "Public Subnet 1:" },
        "PublicSubnetCIDR2" : { "default" : "Public Subnet 2:" },
        "PrivateSubnetCIDR1" : { "default" : "Private Subnet 1:" },
        "PrivateSubnetCIDR2" : { "default" : "Private Subnet 2:" },
        "InstanceType" : { "default" : "vADC instance type:" },
        "vADCVers" : { "default" : "vADC Version:" },
        "KeyName" : { "default" : "SSH Key Name:" },
        "AdminPass" : { "default" : "vADC admin user password:" },
        "AZs" : { "default" : "Select two Availability Zones:" },
        "RemoteAccessCIDR" : { "default" : "Remote Access CIDR:" },
        "DomainName" : { "default" : "Sample Web App Domain name:" },
        "AppConfigURL" : { "default" : "vADC Config Puppet Manifest URL:" },
        "SSLPublicKey" : { "default" : "SSL Public Key:" },
        "SSLPrivateKey" : { "default" : "SSL Private Key:" }
      }
    }
  },

  "Parameters": {
    "InstanceType": {
      "Description": "Please select a vADC EC2 instance type",
      "Type": "String",
      "Default": "m4.large",
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "Must be an allowed EC2 instance type."
    },

    "vADCVers" : {
      "Description" : "Please select vADC version. This template deploys Developer Edition SKU. Note not all vADC versions are available in all regions, and some older versions may not be available, too.",
      "Type" : "String",
      "Default" : "110",
      "AllowedValues" : [
        "98r1",
        "98r2",
        "99",
        "99r1",
        "100",
        "101",
        "102r1",
        "103",
        "103r1",
        "104",
        "110"
      ],
      "ConstraintDescription" : "Must be a valid vADC version"
    },

    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "Description": "Name of an existing EC2 KeyPair. Your vADC will launch with this KeyPair.",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },

    "AdminPass": {
      "Description" : "Password for the vADC admin user. Must be 6 to 32 characters containing letters, numbers and symbols",
      "Type"        : "String",
      "MinLength"   : "6",
      "MaxLength"   : "32",
      "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "NoEcho"         : "true",
      "Default"        : "Password123"
    },

    "RemoteAccessCIDR": {
      "Description": "Allowed source IP address range for SSH access into vADC",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "VPCCIDR": {
      "Description": "This is the IP block for your new VPC. Typically it is a /16 from the private IP range.",
      "Type": "String",
      "Default": "10.8.0.0/16",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "AZs": {
      "Description": "List of Availability Zones where Private and Public subnet pairs will be created. Please select two.",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "ConstraintDescription": "Please select an AZ from a drop-down list."            
    },

    "PublicSubnetCIDR1": {
      "Description": "vADC 1 will have one interface in this public subnet.",
      "Type": "String",
      "Default": "10.8.1.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "PublicSubnetCIDR2": {
      "Description": "vADC 2 will have one interface in this public subnet.",
      "Type": "String",
      "Default": "10.8.2.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "PrivateSubnetCIDR1": {
      "Description": "This is a private subnet available for your instances in AZ1.",
      "Type": "String",
      "Default": "10.8.3.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },
    
    "PrivateSubnetCIDR2": {
      "Description": "This is a private subnet available for your instances in AZ2.",
      "Type": "String",
      "Default": "10.8.4.0/24",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },

    "DomainName": {
      "Type": "String",
      "Default": "corp.local",
      "AllowedPattern" : "[\\-a-zA-Z0-9\\.]*",
      "Description": "Domain name for the example app. This template will create apex and www records in Route53.",
      "ConstraintDescription": "Please use letters, numbers, and dashes only."
    },

    "AppConfigURL": {
      "Type": "String",
      "Default": "https://raw.githubusercontent.com/dkalintsev/Brocade/master/vADC/CloudFormation/Templates/Variants-and-experimental/Configured-by-Puppet/example.pp",
      "AllowedPattern" : "https?://[-a-zA-Z0-9\\.%/_]*",
      "Description": "URL of the Puppet manifest for vADC configuration.",
      "ConstraintDescription": "Please use letters, numbers, and dashes only. Apologies - this regex is rather simple."
    },

    "SSLPublicKey": {
      "Type": "CommaDelimitedList",
      "Default": "-----BEGIN CERTIFICATE-----,MIIDVjCCAj4CCQCFxCco1wRsijANBgkqhkiG9w0BAQUFADBtMQswCQYDVQQGEwJV,UzERMA8GA1UECBMITmV3IFlvcmsxETAPBgNVBAcTCEJyb29rbHluMSEwHwYDVQQK,ExhFeGFtcGxlIEJyb29rbHluIENvbXBhbnkxFTATBgNVBAMUDCouY29ycC5sb2Nh,bDAeFw0xNjA5MjcwMTQ5MTlaFw0xNzA5MjcwMTQ5MTlaMG0xCzAJBgNVBAYTAlVT,MREwDwYDVQQIEwhOZXcgWW9yazERMA8GA1UEBxMIQnJvb2tseW4xITAfBgNVBAoT,GEV4YW1wbGUgQnJvb2tseW4gQ29tcGFueTEVMBMGA1UEAxQMKi5jb3JwLmxvY2Fs,MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsV4APYXFTIvUrFl46OJ2,6dnv2x6yXbV+WH1f2S0i6/1a1b/7hLhPa8S9xxPwWh/ykpZvrNV3tAZ04fA6R68Y,Bq29Vd5APZNrOWN7LIOaxNMgPSgY7c5ZB6eqlGPa7sACftvSiDEghjpn77RC7n56,LulnNHrZVxdz2Ot1fu/FXtmuBX1D9mxNLjQyfN0AiHb2Q85qGLd0anQWCNuaOXJn,CUXWJFNh8M21UN7bvGBNe0dbCumJFmbpqWQ2wrAZBso/lpv97paoaf/xzGFwYrgr,haqyAs0EJOn1oE8lqApkuorFOrgNb4CZJGz85KKJgfErin7VLR6+V9AcrEeUTXie,0wIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQBzDFQdfZcNQLr8RthsjkuUS7jftm+w,XrgGZ6EPq9andnj0EPL/r+3O2O56eOSHE8XhtJC/9i/aY3gWKCSB1TiZX3i2JJ/O,zn3o5ysEtiDN+pjYMj/xEYbGQShmrDBvjgiKWR5ADZ4A/p8axcAZK+y/CGs9g3lZ,OfpRwBpPxa0q4rU3eo25MEmhbqoJD4N39piczXhR02GZ2sFEka4bdWUGezdm9/Cb,J8PF2AjrD9dp3s5ulQapArMMZszE9w4zbNbgYevRfKERgHq3tedy2J9ukE4BUO5m,taUDGSBEHS37pjs5LtdcZmVonsD04TqIrlZCMAkApHI9r/pPDi1CAluJ,-----END CERTIFICATE-----",
      "Description": "Change your public SSL key newlines to commas."
    },

    "SSLPrivateKey": {
      "Type": "CommaDelimitedList",
      "NoEcho": "true",
      "Default": "-----BEGIN RSA PRIVATE KEY-----,MIIEpQIBAAKCAQEAsV4APYXFTIvUrFl46OJ26dnv2x6yXbV+WH1f2S0i6/1a1b/7,hLhPa8S9xxPwWh/ykpZvrNV3tAZ04fA6R68YBq29Vd5APZNrOWN7LIOaxNMgPSgY,7c5ZB6eqlGPa7sACftvSiDEghjpn77RC7n56LulnNHrZVxdz2Ot1fu/FXtmuBX1D,9mxNLjQyfN0AiHb2Q85qGLd0anQWCNuaOXJnCUXWJFNh8M21UN7bvGBNe0dbCumJ,FmbpqWQ2wrAZBso/lpv97paoaf/xzGFwYrgrhaqyAs0EJOn1oE8lqApkuorFOrgN,b4CZJGz85KKJgfErin7VLR6+V9AcrEeUTXie0wIDAQABAoIBAQCJiwHYs9HqqE0G,UmQHBQd+FXmBjO546PPPn3oiqnP4WYKFW9mqdFtykSEyLm4nFbtAndSATRIE0zT0,uRwY1tlk5Hp9Clr65UUzPcgZHv14QNkxU9TxJSG5Y/ZOGJmAp/nHcqRy5NX6AXT0,V+/HjuElW+6irdm5RgCaaQ22oC2IfS5QAR+zfrEbgkKqcgE5HthM9UqzYxBMHwHs,9i2ounbmDlziR7RHu5+ggCmSMGbcLocOugLORz2pS0zMQ+WY1Bch4R00T/k/Pg2t,q33M28D523bHWoUCHOf0vb6POqFA62sJJQeb01O9sDawJQwB6QwDrUUzzwzIdDAE,yqOO4iSBAoGBAOhm4VK7mrpg6behbheqEf0/VUb2ZBT/xVDiblCYfgx1k7q6h6jn,wcJaPMe3nJCUNoCvRBja7LMb/BMLKhts3WhUPUDfhKdq/sQ57q888EomA8f++20D,pSNno/nlQ0/CfkxrCBq6gzSiTuxSamTdGkkFtbK+a0tlSUXGA+mhx4dhAoGBAMNg,iJ8CeH4l/79PGpa6Boxqq3NNdIyauxxqHbolFuQCS8ROlPnObKLXXQIGJRn6EbaO,sqNg5LWrDQQtG6gBdgtDaqQWXkoPN8GgYqNdr400RP9/26SLvDuAGPR3v27a1GNZ,mu3bXlSYgMBeA+WLEuseWl9TnBVjneW2xTiudrazAoGBAJ2ZnvW26W+45uWzYHBF,0ds2RsNPtYEUDiAS3ZJkRx514Y/AjNy7BYeiIBOj7VWSXP+ZW4mrdNblhGT5rj1Y,7zCf58YFjfTmtwwk6TsHDUCLVQccYC6GSUegMe/2TFZbY8C42I8fqnhYFUNnhGUQ,F5IrgBNN1H8VmcHqTZ7zKdchAoGBAKngSoovZMMSmR8nUZASqVT3/qEfjKIge2aG,YdiTHScdU/GY/fGCaXThWs5Ct4mxpCseQfbKbbIDyyqBahWXR6MdeCC6DjvIpYsm,v/0ZnWViOEgLTNfyY7U8ePY/FGT3wkmsBIih/5AAlZotZKf2V3m1h5BxKzpxxj2Q,wES7dR7/AoGAfMrRP0+MedNHM9D0xL3pnzlPIia5ud8qx0bakdU6I7Cs+PGGH0ya,9D3OIenVmzZCfslifMWCkIKbgn6H/je5fbVAOuylE7w1QzA55vn53QRyLkPcej5t,jRktZBy7qY7jdbvXIwVpMOnUaodxvQFvfbu2VgsktEAbOQWjKRKlPLY=,-----END RSA PRIVATE KEY-----",
      "Description": "Change your private SSL key newlines to commas."
    }

  },

  "Mappings" : {
    "AWSRegions" : {
      "us-east-1"      : { "Name" : "US East (N. Virginia)" },
      "us-west-1"      : { "Name" : "US West (N. California)" },
      "us-west-2"      : { "Name" : "US West (Oregon)" },
      "eu-west-1"      : { "Name" : "EU (Ireland)" },
      "eu-central-1"   : { "Name" : "EU (Frankfurt)" },
      "ap-south-1"     : { "Name" : "Asia Pacific (Mumbai)" },
      "ap-northeast-1" : { "Name" : "Asia Pacific (Tokyo)" },
      "ap-northeast-2" : { "Name" : "Asia Pacific (Seoul)" },
      "ap-southeast-1" : { "Name" : "Asia Pacific (Singapore)" },
      "ap-southeast-2" : { "Name" : "Asia Pacific (Sydney)" },
      "sa-east-1"      : { "Name" : "South America (São Paulo)" }
    },

    "vADCAMI" : {
      "ap-south-1" : { "104" : "ami-1b1a7074", "110" : "ami-f9bcd696" },
      "eu-west-1" : { "98r1" : "ami-dcb714ab", "98r2" : "ami-e455e193", "99" : "ami-55781f22", "99r1" : "ami-ead66f99", "100" : "ami-514c2c26", "101" : "ami-fa1d408d", "102r1" : "ami-d976d2aa", "103" : "ami-796bcb0a", "103r1" : "ami-33fa4140", "104" : "ami-b46ee8c7", "110" : "ami-4f0f963c" },
      "ap-southeast-1" : { "98r1" : "ami-44b39416", "98r2" : "ami-a8b497fa", "99" : "ami-4e47751c", "99r1" : "ami-ddf931be", "100" : "ami-2a655878", "101" : "ami-bc444aee", "102r1" : "ami-64559407", "103" : "ami-7bb47718", "103r1" : "ami-357fb756", "104" : "ami-9c38f2ff", "110" : "ami-826bb8e1" },
      "ap-southeast-2" : { "98r1" : "ami-71a2c04b", "98r2" : "ami-bbcea181", "99" : "ami-f393e1c9", "99r1" : "ami-135c7d70", "100" : "ami-91700dab", "101" : "ami-bfadee85", "102r1" : "ami-d5ffa6b6", "103" : "ami-16e5bd75", "103r1" : "ami-a2a687c1", "104" : "ami-b11734d2", "110" : "ami-983e16fb" },
      "eu-central-1" : { "99r1" : "ami-64b5510b", "100" : "ami-68e2de75", "101" : "ami-68262175", "102r1" : "ami-29485545", "103" : "ami-496b7725", "103r1" : "ami-b318fcdc", "104" : "ami-685abc07", "110" : "ami-93dc34fc" },
      "ap-northeast-2" : { "99r1" : "ami-7d6ea013", "103" : "ami-4b965825", "103r1" : "ami-c07db3ae", "104" : "ami-b1c70edf", "110" : "ami-3d4f8453" },
      "ap-northeast-1" : { "98r1" : "ami-133e1412", "98r2" : "ami-2f241c2e", "99" : "ami-926e9792", "99r1" : "ami-20f1fd4e", "100" : "ami-08e12408", "101" : "ami-02803b02", "102r1" : "ami-9681acf8", "103" : "ami-48a98126", "103r1" : "ami-57484139", "104" : "ami-1264727c", "110" : "ami-b17480d0" },
      "us-east-1" : { "98r1" : "ami-3a13a352", "98r2" : "ami-ba008ad2", "99" : "ami-f6417d9e", "99r1" : "ami-f9fac293", "100" : "ami-e6a69c8e", "101" : "ami-a9b912c2", "102r1" : "ami-38cc8d52", "103" : "ami-2f0a4245", "103r1" : "ami-38323652", "104" : "ami-49151e23", "110" : "ami-7f0bc812" },
      "sa-east-1" : { "98r1" : "ami-0d71c410", "98r2" : "ami-7f833562", "99" : "ami-e752e8fa", "99r1" : "ami-cc2eaca0", "100" : "ami-f1a623ec", "101" : "ami-71de566c", "102r1" : "ami-f8b53094", "103" : "ami-1569ed79", "103r1" : "ami-10901d7c", "104" : "ami-1d3cb071", "110" : "ami-792ea415" },
      "us-west-1" : { "98r1" : "ami-4deae108", "98r2" : "ami-25d5c360", "99" : "ami-6d0eed29", "99r1" : "ami-6b3c4f0b", "100" : "ami-03678547", "101" : "ami-fbdc22bf", "102r1" : "ami-01adc461", "103" : "ami-8ec9a1ee", "103r1" : "ami-3d97e45d", "104" : "ami-f296eb92", "110" : "ami-52397d32" },
      "us-west-2" : { "98r1" : "ami-b5f7b585", "98r2" : "ami-85c48fb5", "99" : "ami-d56e45e5", "99r1" : "ami-576f8337", "100" : "ami-f790bac7", "101" : "ami-a7c5cf97", "102r1" : "ami-fccbd89d", "103" : "ami-ad0b17cc", "103r1" : "ami-97bf51f7", "104" : "ami-762cc616", "110" : "ami-913df9f1" }
    },

    "UbuntuAMI" : {
      "ap-south-1" : { "AMI" : "ami-47c4b128" },
      "eu-west-1" : { "AMI" : "ami-284c375b" },
      "ap-southeast-1" : { "AMI" : "ami-eea7028d" },
      "ap-southeast-2" : { "AMI" : "ami-0e3a0a6d" },
      "eu-central-1" : { "AMI" : "ami-72c33e1d" },
      "ap-northeast-2" : { "AMI" : "ami-cf71a4a1" },
      "ap-northeast-1" : { "AMI" : "ami-04ba6965" },
      "us-east-1" : { "AMI" : "ami-8fe79998" },
      "sa-east-1" : { "AMI" : "ami-a88211c4" },
      "us-west-1" : { "AMI" : "ami-96d897f6" },
      "us-west-2" : { "AMI" : "ami-a24598c2" }
    }

  },

  "Conditions" : {
  },
  
  "Resources": {

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {  "Key": "Application",
            "Value": "vADC Quick Start"
          },

          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "VPC" ] ] }
          }

        ]
      }
    },

    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCIDR1"
        },
        "Tags": [
          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSub1" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Ref": "AZs" } ]
        }
      }
    },

    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCIDR2"
        },
        "Tags": [
          { "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSub2" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Ref": "AZs" } ]
        }
      }
    },

    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PriSub1" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Ref": "AZs" } ]
        }
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PriSub2" ] ] }
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Ref": "AZs" } ]
        }
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "IGW" ] ] }
          }
        ]
      }
    },

    "AttachGateway": {
      "DependsOn": "InternetGateway",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnetRouteTable": {
      "DependsOn": "AttachGateway",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PubSubRouteTab" ] ] }
          }
        ]
      }
    },

    "PublicRoute1": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
        "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        }
      }
    },

    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        }
      }
    },

    "vADCSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "vADC Access Rules",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9090",
            "ToPort": "9090",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "9090",
            "ToPort": "9090",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9080",
            "ToPort": "9080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "9080",
            "ToPort": "9080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8083",
            "ToPort": "8083",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8086",
            "ToPort": "8086",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11000",
            "ToPort": "11000",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11002",
            "ToPort": "11002",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11007",
            "ToPort": "11007",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9070",
            "ToPort": "9070",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADCSG" ] ] }
          }
        ]
      }
    },

    "TrafficIP1": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "TrafficIP2": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "vADCIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "vADCIAMPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeRegions",
                    "ec2:DescribeInstances",
                    "ec2:DescribeAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress",
                    "ec2:AllocateAddress",
                    "ec2:ReleaseAddress",
                    "ec2:AssignPrivateIPAddresses",
                    "ec2:UnAssignPrivateIpAddresses",
                    "ec2:RunInstances",
                    "ec2:CreateTags",
                    "ec2:TerminateInstances"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "vADCInstanceIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "vADCIAMRole"
          }
        ]
      }
    },


    "vADC1": {
      "Type": "AWS::EC2::Instance",

      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : [ "CreateFiles", "RunCommands" ]
          },

          "CreateFiles" : {
            "files" : {
              "/tmp/test.txt" : {
                "content" : "Content for {{name}}",
                "context" : { "name" : "test" }
              }
            }
          },

          "RunCommands" : {
            "commands" : {

              "01-dev_mode_accept" : {
                "command" : "echo \"developer_mode_accepted     yes\" >> /opt/zeus/zxtm/global.cfg"
              },

              "02-enable_rest_api" : {
                "command" : "echo \"rest!enabled     Yes\" >> /opt/zeus/zxtm/conf/settings.cfg"
              },

              "99-wait_3_mins_then_signal_that_we_are_done" : {
                "command" : { "Fn::Join" : ["", [
                  "sleep 180 && /usr/local/bin/cfn-signal -s true '",
                  { "Ref" : "WaitHandle01" },
                  "'"
                ]]}
              }

            }
          }
        }
      },

      "DependsOn": "AttachGateway",
      "Properties": {
        "IamInstanceProfile": { "Ref": "vADCInstanceIAMProfile"},
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC1" ] ] }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "password=",
            { "Ref" : "AdminPass" },
          " accept_license=y",
          " cfn_stack=",
            { "Ref" : "AWS::StackName" },
          " cfn_resource=",
            "vADC1",
          " cfn_region=",
            { "Ref" : "AWS::Region" }
        ]]}},
        "SourceDestCheck": "false",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "SecondaryPrivateIpAddressCount": "2",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "GroupSet": [
              {
                "Ref": "vADCSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "vADCAMI",
            { "Ref": "AWS::Region" },
            { "Ref": "vADCVers" }
          ]
        }
      }
    },

    "vADC1RecoveryAlarm": {
      "DependsOn": "vADC1",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "EC2 Autorecovery for vADC 1. Autorecover if we fail EC2 status checks for 15 minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "vADC1"
            }
          }
        ]
      }
    },

    "WaitHandle01": {
        "Type": "AWS::CloudFormation::WaitConditionHandle",
        "Properties": {}
    },
    "WaitCondition01": {
        "Type": "AWS::CloudFormation::WaitCondition",
        "DependsOn": "vADC1",
        "Properties": {
            "Handle": {
                "Ref": "WaitHandle01"
            },
            "Timeout": "600"
        }
    },

    "vADC2": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "WaitCondition01",

      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : [ "RunCommands" ]
          },

          "RunCommands" : {
            "commands" : {

              "01-dev_mode_accept" : {
                "command" : "echo \"developer_mode_accepted     yes\" >> /opt/zeus/zxtm/global.cfg"
              },

              "02-replicate_updated_config" : {
                "command" : "sleep 30 && /opt/zeus/zxtm/bin/replicate-config"
              }

            }
          }
        }
      },


      "Properties": {
        "IamInstanceProfile": { "Ref": "vADCInstanceIAMProfile"},
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "vADC2" ] ] }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "accept_license=y",
          " password=",
            { "Ref" : "AdminPass" },
          " cluster_host=",
            { "Fn::GetAtt" : [ "vADC1", "PrivateIp" ] },
          " cluster_fingerprint=unsafe",
          " join_tips=y",
          " cfn_stack=",
            { "Ref" : "AWS::StackName" },
          " cfn_resource=",
            "vADC2",
          " cfn_region=",
            { "Ref" : "AWS::Region" }
        ]]}},
        "SourceDestCheck": "false",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "SecondaryPrivateIpAddressCount": "2",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "SubnetId": {
              "Ref": "PublicSubnet2"
            },
            "GroupSet": [
              {
                "Ref": "vADCSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "vADCAMI",
            { "Ref": "AWS::Region" },
            { "Ref": "vADCVers" }
          ]
        }
      }
    },

    "vADC2RecoveryAlarm": {
      "DependsOn": "vADC2",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "EC2 Autorecovery for vADC 2. Autorecover if we fail EC2 status checks for 15 minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "vADC2"
            }
          }
        ]
      }
    },

    "PuppetServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Puppet Server Access Rules",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PuppetSG" ] ] }
          }
        ]
      }
    },

    "PuppetIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "vADCIAMPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "PuppetInstanceIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "PuppetIAMRole"
          }
        ]
      }
    },


    "Puppet": {
      "Type": "AWS::EC2::Instance",

      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : [ "CreateFiles" ]
          },

          "CreateFiles": {
            "files" : {
              "/root/QueryWebServers.sh": {
                "source": "https://raw.githubusercontent.com/dkalintsev/Brocade/master/vADC/CloudFormation/Templates/Variants-and-experimental/Configured-by-Puppet/QueryWebServers.sh",
                "mode": "000755",
                "owner": "root"
              },
              "/root/example.pp" : {
                "source": { "Ref": "AppConfigURL" },
                "context": {
                  "AdminPass": { "Ref": "AdminPass" },
                  "vADC1PrivateIP": { "Fn::GetAtt" : [
                      "vADC1",
                      "PrivateIp"
                  ] },
                  "vADC2PrivateIP": { "Fn::GetAtt" : [
                      "vADC2",
                      "PrivateIp"
                  ] },
                  "SSLPrivateKey": { "Fn::Join" : [ "\\n", { "Ref": "SSLPrivateKey"} ] },
                  "SSLPublicKey": { "Fn::Join" : [ "\\n", { "Ref": "SSLPublicKey"} ] },
                  "TrafficIP1": { "Ref": "TrafficIP1" },
                  "TrafficIP2": { "Ref": "TrafficIP2" },
                  "vADC1DNS": { "Fn::GetAtt" : [
                      "vADC1",
                      "PrivateDnsName"
                  ] },
                  "vADC2DNS": { "Fn::GetAtt" : [
                      "vADC2",
                      "PrivateDnsName"
                  ] },
                  "WebServer1":  "__WebServer__"              
                }
              },
              "/root/puppet-apply.sh" : {
                "content": { "Fn::Join": [ "", [
                  "#!/bin/bash\n",
                  "cd /root\n",
                  "/root/QueryWebServers.sh ",
                  "    -r ", { "Ref" : "AWS::Region" },
                  "    -p ", "WebPool",
                  "    -t ", { "Fn::Join": [ "-", [ { "Ref" : "AWS::StackName" }, "WebServer" ]] }, "\n",
                  "if [[ \"$?\" == \"10\" ]]; then\n",
                  "  puppet apply example.pp > /dev/null 2>&1\n",
                  "  if [[ \"$?\" != \"0\" ]]; then\n",
                  "    echo \"Something went wrong with puppet run at $(date)\" >> /root/puppetrun.log\n",
                  "    exit 1\n",
                  "  fi\n",
                  "fi\n"
                ]]},
                "mode": "000755",
                "owner": "root"
              }
            }
          }

        }
      },

      "Properties": {
        "IamInstanceProfile": { "Ref": "PuppetInstanceIAMProfile"},
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "Puppet" ] ] }
          }
        ],
        "InstanceType": "t2.nano",
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "apt-get update -y\n",
          "apt-get install puppet -y\n",
          "puppet module install tuxinvader-brocadevtm\n",
          "apt-get install python-pip -y\n",
          "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          "apt-get install awscli -y\n",
          "apt-get install jq -y\n",

          "/usr/local/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource Puppet ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "sleep 60\n",
          "cd /root\n",
          "rm -f crtab.txt\n",
          "echo \"*/5 * * * * /root/puppet-apply.sh > /dev/null 2>&1\" >> crtab.txt\n",
          "crontab crtab.txt\n",
          "rm -f crtab.txt\n"
        ]]}},
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "GroupSet": [
              {
                "Ref": "PuppetServerSecurityGroup"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "UbuntuAMI",
            { "Ref": "AWS::Region" },
            "AMI"
          ]
        }
      }
    },


    "NAT1EIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "NAT2EIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "NATGateway1": {
      "Type": "AWS::EC2::NatGateway",
      "DependsOn": "AttachGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
              "NAT1EIP",
              "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },

    "NATGateway2": {
      "Type": "AWS::EC2::NatGateway",
      "DependsOn": "AttachGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
              "NAT2EIP",
              "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      }
    },

    "PrivateSubnetRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PriSubRouteTab1" ] ] }
          }
        ]
      }
    },

    "PrivateSubnetRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "PriSubRouteTab2" ] ] }
          }
        ]
      }
    },

    "PrivateRoute1": {
      "Type": "AWS::EC2::Route",
        "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATGateway1"
        }
      }
    },

    "PrivateRoute2": {
      "Type": "AWS::EC2::Route",
        "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATGateway2"
        }
      }
    },

    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable1"
        }
      }
    },

    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable2"
        }
      }
    },

    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Web Server Access Rules",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "WebSG" ] ] }
          }
        ]
      }
    },

    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "WebServer" ] ] },
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "WSLaunchConfig"
        },
        "MinSize": "2",
        "MaxSize": "2",
        "DesiredCapacity": "2",
        "VPCZoneIdentifier": [
          { "Ref": "PrivateSubnet1" },
          { "Ref": "PrivateSubnet2" } 
        ]
      }
    },

    "WSLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : [ "CreateFiles", "RunCommands" ]
          },

          "CreateFiles": {
          },

          "RunCommands" : {
            "commands" : {
              "01-create-index-html" : {
                "command" : "echo \"developer_mode_accepted     yes\" > /tmp/aaa"
              }
            }
          }
        }
      },

      "Properties": {
        "InstanceType": "t2.nano",
        "KeyName": {
          "Ref": "KeyName"
        },
        "AssociatePublicIpAddress": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "UbuntuAMI",
            { "Ref": "AWS::Region" },
            "AMI"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "WebServerSecurityGroup"
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "apt-get update -y\n",
          "apt-get install apache2 -y\n",
          "apt-get install python-pip -y\n",
          "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

          "iid=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
          "lip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
          "cat > /var/www/html/index.html <<EOF\n",
          "<html>\n",
          "This is a simple page served from \"$iid\"<br>\n",
          "running with IP of \"$lip\"<br>\n",
          "</html>\n",
          "EOF\n",

          "/usr/local/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WebServerGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "DNS": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "HostedZoneConfig": {
          "Comment": "Hosted zone for the example app"
        },
        "Name": {
          "Ref": "DomainName"
        }
      }
    },

    "AppDNSRecord1" : {
      "Type" : "AWS::Route53::RecordSetGroup",
      "Properties" : {
        "HostedZoneId" : {
          "Ref" : "DNS"
        },
        "Comment" : "Records for my vADC traffic group IPs.",
        "RecordSets" : [
          {
            "Name": {
              "Fn::Join": [
                "", [ "www", ".", { "Ref": "DomainName" }, "." ]
              ]
            },
            "Type": "A",
            "TTL": "900",
            "ResourceRecords": [
              { "Ref": "TrafficIP1" },
              { "Ref": "TrafficIP2" }
            ]
          }
        ]
      }
    },

    "AppDNSRecord2" : {
      "DependsOn": "AppDNSRecord1",
      "Type" : "AWS::Route53::RecordSetGroup",
      "Properties" : {
        "HostedZoneId" : {
          "Ref" : "DNS"
        },
        "Comment" : "Apex alias record for my vADC traffic group IPs.",
        "RecordSets" : [
          {
            "Name": {
              "Fn::Join": [
                "", [ { "Ref": "DomainName" }, "." ]
              ]
            },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": { "Ref": "DNS" },
              "DNSName": {
                "Fn::Join": [
                  "", [ "www", ".", { "Ref": "DomainName" }, "." ]
                ]
              }
            }
          }
        ]
      }
    }

  },

  "Outputs": {

    "vADC1PubIP": {
      "Description": "vADC 1 Public IP",
      "Value": {
          "Fn::GetAtt": [ "vADC1", "PublicIp" ]
      }
    },

    "vADC2PubIP": {
      "Description": "vADC 2 Public IP",
      "Value": {
          "Fn::GetAtt": [ "vADC2", "PublicIp" ]
      }
    },

    "ClusterAdminURL": {
      "Description": "URL to access vADC Cluster Admin interface",
      "Value": {
        "Fn::Join": [ "", [
          "https://",
          { "Fn::GetAtt": [ "vADC1", "PublicDnsName" ] },
          ":9090"
        ] ]
      }
    },

    "WebAppIPs": {
      "Description": "Domain and Public IPs for sample WebApp",
      "Value": {
        "Fn::Join": [ "", [
          "URL: ",
          { "Ref": "DomainName" },
          ", IP1: ",
          { "Ref": "TrafficIP1" },
          ", IP2: ",
          { "Ref": "TrafficIP2" }
        ] ]
      }
    },

    "PuppetPubIP": {
      "Description": "Public IP of Puppet server",
      "Value": {
          "Fn::GetAtt": [ "Puppet", "PublicIp" ]
      }
    }

  } 
}
